---
options :
  # should getters / setters be prefixed with get / set?
  getSyntax: False
  # should POD members be exposed with getters/setters in classes that have them as members?
  exposePODMembers: False
  includeSubfolder: True

## Some guidance:
##  - Ensure data products usable without library dependencies (favor PODness where
##    possible).
##  - Move towards EDM4hep compatibility (to allow a transition to mainly use EDM4hep).
##        - migrate away from custom indices in favor of podio relations
##  - Use float most of the time except for 4-vectors where ppm precision is important.
##  - Data alignment: 
##        - data should be aligned with a 64-bit structure where possible.
##        - when using 32 bit values, use them in pairs (or after all 64-bit variables are defined). 
##        - same goes for 16-bit values (keep them aligned with the largest following component)
##  - Explicitly specify the integer length (use the typedefs from <cstdint>, 
##    such as int32_t etc)

components:

  ## Unique field identifier. Has 2 components: source and ID where
  ## source identifies the originating collection (or algorithm) and ID 
  ## the ID of the entry within this collection. 
  ## Defaults to -1 for an unset index.
  eic::Index:
    Members:
      - int32_t    value
      - int32_t    source
    ExtraCode:
      declaration: "
        Index() : source{0}, value{-1} {}\n
        Index(int32_t id) : value{id}, source{0} {}\n
        Index(int32_t id, int32_t src) : value{id}, source{src} {}\n
        Index(Index rhs, int32_t new_src) : Index(rhs.value, new_src) {} \n
        bool empty() const {return value < 0;}\n
        bool valid() const {return value >= 0 && source != 0;}\n
        bool equals(const eic::Index& rhs) const {return rhs.source == source && rhs.value == value;}\n
        bool operator==(const eic::Index& rhs) const {return equals(rhs);}\n
        bool operator!=(const eic::Index& rhs) const {return !equals(rhs);}\n
        bool operator<(const eic::Index& rhs) const {return long_form() < rhs.long_form();}\n
        uint64_t long_form() const {int64_t l = static_cast<int64_t>(source) << 32 | value; return l;}\n
        explicit operator bool() const {return valid();}
      "

  ## simple weight that defaults to 1 if not set
  eic::Weight:
    Members:
      - float value
    ExtraCode:
      declaration: "
        Weight() : value{1.} {}\n
        Weight(double w) : value {static_cast<float>(w)} {}\n
        Weight& operator=(double w) {value = static_cast<float>(w); return *this;}\n
        operator float() const {return value;}
      "

  eic::VectorXY:
    Members:
      - float x          // [mm] or [GeV]
      - float y          //
    ExtraCode:
      includes: "#include <cmath>\n"
      declaration: "
        VectorXY() : x{0}, y{0} {}\n
        VectorXY(double xx, double yy) : x{static_cast<float>(xx)}, y{static_cast<float>(yy)} {}\n
        float& operator[](unsigned i) {return *(&x + i);}\n
        const float& operator[](unsigned i) const {return *(&x + i);}\n
        float mag() const {return std::hypot(x, y);}\n
        float r() const {return mag();}\n
        float phi() const {return atan2(y, x);}\n
        operator std::pair<float, float>() const {return {x, y};}\n
        float dot(const VectorXY& rhs) const {return x*rhs.x + y*rhs.y;}\n
        VectorXY add(const VectorXY& rhs) const {return {x+rhs.x, y+rhs.y};}\n
        VectorXY subtract(const VectorXY& rhs) const {return {x-rhs.x, y-rhs.y};}\n
        VectorXY scale(double f) const {return {f*x, f*y};}\n
      "

  # Copy from EDM4hep with conversion operators added
  # TODO: uncomment Vector2f conversions when we migrate to new EDM4hep version
  eicd::Vector2f :
    Members:
      - float a
      - float b
    ExtraCode:
      declaration: "
        Vector2f() : a(0),b(0) {}\n
        Vector2f(float aa,float bb) : a(aa),b(bb) {}\n
        Vector2f(const float* v) : a(v[0]), b(v[1]) {}\n
        bool operator==(const Vector2f& v) const { return (a==v.a&&b==v.b) ; }\n
        float operator[](unsigned i) const { return *( &a + i ) ; }\n
        //Vector2f(const edm4hep::Vector2f& v) : a{v.a}, b{v.b} {}\n
        //operator edm4hep::Vector2f() const {return {a, b};}\n
        "
      includes: "
       // #include <edm4hep/Vector2f.h>\n
      "

  # Copy from EDM4hep with conversion operators added
  eicd::Vector3f :
    Members:
      - float x
      - float y
      - float z
    ExtraCode:
      declaration: "
        Vector3f() : x(0),y(0),z(0) {}\n
        Vector3f(float xx, float yy, float zz) : x(xx),y(yy),z(zz) {}\n
        Vector3f(const float* v) : x(v[0]),y(v[1]),z(v[2]) {}\n
        bool operator==(const Vector3f& v) const { return (x==v.x&&y==v.y&&z==v.z) ; }\n
        float operator[](unsigned i) const { return *( &x + i ) ; }\n
        Vector3f(const edm4hep::Vector3f& v) : x{v.x}, y{v.y}, z{v.z} {}
        operator edm4hep::Vector3f() const {return {x, y, z};}\n
        "
      includes: "
        #include <edm4hep/Vector3f.h>\n
      "

  eic::VectorXYZ:
    Members:
      - float x          // [mm] or [GeV]
      - float y          //
      - float z          //
    ExtraCode:
      includes: "#include <cmath>\n#include<tuple>"
      declaration: "
        VectorXYZ() : x{0}, y{0}, z{0} {}\n
        VectorXYZ(double xx, double yy, double zz) : x{static_cast<float>(xx)}, y{static_cast<float>(yy)}, z{static_cast<float>(zz)} {}\n
        template <class V>
        VectorXYZ(const V& v) : x{v.x}, y{v.y}, z{v.z} {}\n
        float& operator[](unsigned i) {return *(&x + i);}\n
        const float& operator[](unsigned i) const {return *(&x + i);}\n
        float mag() const {return std::hypot(x, y, z);}\n
        float r() const {return mag();}\n
        float theta() const {return acos(z/mag());}\n
        float phi() const {return atan2(y,x);}\n
        float eta() const {return -log(tan(0.5*theta()));}\n
        operator std::tuple<float, float, float>() {return {x, y, z};}\n
        float dot(const VectorXYZ& rhs) const {return x*rhs.x + y*rhs.y + z*rhs.z;}\n
        VectorXYZ add(const VectorXYZ& rhs) const {return {x+rhs.x, y+rhs.y, z+rhs.z};}\n
        VectorXYZ subtract(const VectorXYZ& rhs) const {return {x-rhs.x, y-rhs.y, z-rhs.z};}\n
        VectorXYZ scale(double f) const {return {f*x, f*y, f*z};}\n
     "

  eic::VectorXYZT:
    Members:
      - double x        // [mm] or [GeV]
      - double y        //
      - double z        //
      - double t        // [ns] or [GeV]
    ExtraCode:
      includes: "#include <cmath>\n#include <tuple>"
      declaration: "
        VectorXYZT() : x{0}, y{0}, z{0}, t{0} {}\n
        VectorXYZT(double xx, double yy, double zz, double tt) : x{xx}, y{yy}, z{zz}, t{tt} {}\n
        double& operator[](unsigned i) {return *(&x + i);}\n
        const double& operator[](unsigned i) const {return *(&x + i);}\n
        double mag() const {return std::hypot(x, y, z);}\n
        double r() const {return mag();}\n
        double theta() const {return acos(z/mag());}\n
        double phi() const {return atan2(y,x);}\n
        double eta() const {return -log(tan(0.5*theta()));}
        double energy() const {return t;}\n
        double mass() const {return sqrt(t*t - x*x - y*y - z*z);}\n
        operator std::tuple<double, double, double, double>() {return {x, y, z, t};}\n
        double dot(const VectorXYZT& rhs) const {return t*rhs.t - x*rhs.x - y*rhs.y - z*rhs.z;}\n
        VectorXYZT add(const VectorXYZT& rhs) const {return {x+rhs.x, y+rhs.y, z+rhs.z, t+rhs.t};}\n
        VectorXYZT subtract(const VectorXYZT& rhs) const {return {x-rhs.x, y-rhs.y, z-rhs.z, t-rhs.t};}\n
        VectorXYZT scale(double f) const {return {f*x, f*y, f*z, f*t};}\n
      "

  eic::CovDiagXYZ:
    Members:
      - float xx
      - float yy
      - float zz
    ExtraCode:
      declaration: "
        CovDiagXYZ() : xx{0}, yy{0}, zz{0} {}\n
        CovDiagXYZ(double x, double y, double z) : xx{static_cast<float>(x)}, yy{static_cast<float>(y)}, zz{static_cast<float>(z)} {}\n
        float operator()(unsigned i, unsigned j) const {return (i == j) ? *(&xx + i) : 0.;}\n
        "

  eic::CovDiagXYZT:
    Members:
      - double xx
      - double yy
      - double zz
      - double tt
    ExtraCode:
      declaration: "
        CovDiagXYZT() : xx{0}, yy{0}, zz{0}, tt{0} {}\n
        CovDiagXYZT(double x, double y, double z, double t) : xx{x}, yy{y}, zz{z}, tt{t} {}\n
        double operator()(unsigned i, unsigned j) const {return (i == j) ? *(&xx + i) : 0.;}\n
        "

  eic::CovXY:
    Members:
      - float xx
      - float yy
      - float xy
    ExtraCode:
      declaration: "
        CovXY() : xx{0}, yy{0}, xy{0} {}\n
        CovXY(double vx, double vy, double vxy = 0)\n
          : xx{static_cast<float>(vx)}, yy{static_cast<float>(vy)}, xy{static_cast<float>(vxy)} {}\n
        float operator()(unsigned i, unsigned j) const {\n
          // diagonal\n
          if (i == j) {\n
            return *(&xx + i);\n
          }\n
          // off-diagonal\n
          // we have as options (0, 1), and (1, 0)\n
          // note that, starting from xy, we find the correct element at (i+j-1)\n
          return *(&xy + i + j - 1);\n
        }\n
      "
  ## ProtoCluster hit relation
  eic::ProtoClusterHit:
    Members:
      - eic::Index  ID            // ID of the hit
      - uint32_t    index         // Raw index of the hit in the relevant array
      - eic::Weight weight        // weight of the hit

  eic::CovXYZ:
    Members:
      - float xx
      - float yy
      - float zz
      - float xy
      - float xz
      - float yz
    ExtraCode:
      declaration: "
        CovXYZ() : xx{0}, yy{0}, zz{0}, xy{0}, xz{0}, yz{0} {}\n
        CovXYZ(double vx, double vy, double vz, double vxy, double vxz, double vyz)\n
          : xx{static_cast<float>(vx)}, yy{static_cast<float>(vy)}, zz{static_cast<float>(vz)},\n
            xy{static_cast<float>(vxy)}, xz{static_cast<float>(vxz)}, yz{static_cast<float>(vyz)} {}\n
        CovXYZ(double vx, double vy, double vz)\n
          : CovXYZ(vx, vy, vz, 0, 0, 0) {} \n
        float operator()(unsigned i, unsigned j) const {\n
          // diagonal\n
          if (i == j) {\n
            return *(&xx + i);\n
          }\n
          // off-diagonal\n
          // we have as options (0, 1), (0, 2) and (1, 2) (and mirrored)\n
          // note that, starting from xy, we find the correct element at (i+j-1)\n
          return *(&xy + i + j - 1);\n
        }\n
      "

  ## A point along a track
  eic::TrackPoint:
    Members:
      - eic::VectorXYZ    position        // Position of the trajectory point [mm]
      - eic::CovXYZ       positionError   // Error on the position
      - eic::VectorXYZ    momentum        // 3-momentum at the point [GeV]
      - eic::CovXYZ       momentumError   // Error on the 3-momentum
      - float             time            // Time at this point [ns]
      - float             timeError       // Error on the time at this point
      - float             theta           // polar direction of the track at the surface [rad]
      - float             phi             // azimuthal direction of the track at the surface [rad]
      - eic::CovXY        directionError  // Error on the polar and azimuthal angles
      - float             pathlength      // Pathlength from the origin to this point
      - float             pathlengthError // Error on the pathlenght
 
datatypes:

  ## ==========================================================================
  ## Event info
  ## ==========================================================================

  eic::EventInfo:
    Description: "Event Info"
    Author: "W. Armstrong, S. Joosten"
    Members:
      - uint64_t          run              // Run number.
      - uint64_t          number           // Event number.
      - int32_t           type             // Event type identifier (TBD).
      - int32_t           proc             // Process identifier (TBD).
      - int32_t           source           // Source/identifier (TBD)
      - eic::Weight       weight           // Optional event weight (useful for MC)

  
  ## ==========================================================================
  ## Particle info
  ## ==========================================================================

  eic::BasicParticle:
    Description: "Basic particle used internally to communicate basic particle properties."
    Author: "W. Armstrong, S. Joosten"
    Members:
      - eic::Index        ID                // Unique particle index
      - eicd::Vector3f     p                 // Momentum [GeV]
      - eicd::Vector3f     v                 // Vertex [mm]
      - float             time              // Time in [ns]
      - int32_t           pid               // Particle PDG code
      - int16_t           status            // Status code
      - int16_t           charge            // Particle charge (or sign)
      - eic::Weight       weight            // Particle weight, e.g. from PID algorithm [0-1]

  eic::ReconstructedParticle:
    Description: "EIC Reconstructed Particle"
    Author: "W. Armstrong, S. Joosten"
    Members:
      - eic::Index        ID                // Unique particle index
      - eic::VectorXYZ    p                 // Momentum vector [GeV]
      - eic::VectorXYZ    v                 // Vertex [mm]
      - float             time              // Time in [ns]
      - int32_t           pid               // PID of reconstructed particle.
      - int16_t           status            // Status code
      - int16_t           charge            // Particle charge (or sign)
      - eic::Weight       weight            // Particle weight, e.g. from PID algorithm [0-1]
      - float             theta             // Polar angle of this particle [rad]
      - float             phi               // Azimuthal angle of this particle [rad]
      - float             momentum          // particle 3-momentum magnitude [GeV]
      - float             energy            // Particle energy, consistent with PID assigment [GeV]
      - float             mass              // The mass of the particle in [GeV]
      - eic::Index        vertexID          // Start vertex for this particle
      - eic::Index        trackID           // Index of the associated track, if any
      - eic::Index        ecalID            // Index of associated pos/barrel/neg ECAL cluster, if any
      - eic::Index        hcalID            // Index of associated pos/barrel/neg HCAL cluster, if any
      - eic::Index        cherID            // Index of associated pos/barrel/neg Cherenkov info, if any
      - eic::Index        tofID             // Index of the associated TOF info, if any
      - eic::Index        mcID              // Index of the associated MC particle, if any

  ## ==========================================================================
  ## Calorimetry
  ## ==========================================================================
  eic::RawCalorimeterHit:
    Description: "Raw (digitized) calorimeter hit"
    Author: "W. Armstrong, S. Joosten"
    Members:
      - uint64_t           cellID            // The detector specific (geometrical) cell id.
      - uint64_t           amplitude         // The amplitude of the hit in ADC counts.
      - uint64_t           timeStamp         // Timing in TDC

  eic::CalorimeterHit:
    Description: "Calorimeter hit"
    Author: "W. Armstrong, S. Joosten"
    Members:
      - uint64_t          cellID            // The detector specific (geometrical) cell id.
      - float             energy            // The energy for this hit in [GeV].
      - float             energyError       // Error on energy [GeV].
      - float             time              // The time of the hit in [ns].
      - float             timeError         // Error on the time
      - eic::VectorXYZ    position          // The global position of the hit in world coordinates [mm].
      - eic::VectorXYZ    dimension         // The dimension information of the cell [mm].
      - int32_t           sector            // Sector that this hit occured in
      - int32_t           layer             // Layer that the hit occured in
      - eic::VectorXYZ    local             // The local coordinates of the hit in the detector segment [mm]. 

  ## ==========================================================================
  ## Clustering
  ## ==========================================================================
  
  eic::ProtoCluster:
    Description: "Collection of hits identified by the clustering algorithm to belong together"
    Author: "S. Joosten"
    OneToManyRelations:
      - eic::CalorimeterHit  hits           // Hits associated with this cluster
    VectorMembers:
      - float                weights        // Weight for each of the hits, mirrors hits array

  eic::Cluster:
    Description: "EIC hit cluster, reworked to more closely resemble EDM4hep"
    Author: "W. Armstrong, S. Joosten, C.Peng"
    Members:
      # main variables
      - int32_t           type              // Flagword that defines the type of the cluster
      - float             energy            // Reconstructed energy of the cluster [GeV].
      - float             energyError       // Error on the cluster energy [GeV]
      - float             time              // [ns]
      - float             timeError         // Error on the cluster time
      - uint32_t          nhits             // Number of hits in the cluster.
      - eic::VectorXYZ    position          // Global position of the cluster [mm].
      - eic::CovXYZ       positionError     // Covariance matrix of the position (6 Parameters).
      - float             intrinsicTheta    // Intrinsic cluster propagation direction polar angle [rad]
      - float             intrinsicPhi      // Intrinsic cluster propagation direction azimuthal angle [rad]
      - eic::CovXY        intrinsicDirectionError // Error on the intrinsic cluster propagation direction
    VectorMembers:
      - float             shapeParameters   // Should be set in metadata, for now radius/skewness
      - float             hitContributions  // Energy contributions of the hits. Runs parallel to ::hits()
      - float             subdetectorEnergies // Energies observed in each subdetector used for this cluster.
    OneToManyRelations:
      - eic::Cluster      clusters          // Clusters that have been combined to form this cluster
      - eic::CalorimeterHit hits            // Hits that have been combined to form this cluster
      #- eic::ParticleID  particleIDs       // Particle IDs sorted by likelihood, TODO

  ## ==========================================================================
  ## RICH/Cherenkov data structures
  ## ==========================================================================

  eic::RawPMTHit:
    Description: "EIC Raw PMT hit"
    Author: "S. Joosten, C. Peng"
    Members:
      - eic::Index        ID                // Unique hit ID. For MC, the value equals the Geant4 hit index.
      - uint64_t          cellID            // The detector specific (geometrical) cell id.
      - uint32_t          amplitude         // PMT signal amplitude [ADC]
      - uint32_t          time              // PMT signal time [TDC]

  eic::PMTHit:
    Description: "EIC PMT hit"
    Author: "S. Joosten, C. Peng"
    Members:
      - eic::Index        ID                // Unique hit ID, same as one of the involved raw hits.
      - uint64_t          cellID            // The detector specific (geometrical) cell id.
      - float             npe               // Estimated number of photo-electrons [#]
      - float             time              // Time [ns]
      - float             timeError         // Error on the time [ns]
      - eic::VectorXYZ    position          // PMT hit position [mm]
      - eic::VectorXYZ    local             // The local position of the hit in detector coordinates [mm]
      - eic::VectorXYZ    dimension         // The dimension information of the pixel [mm].

  eic::RingImage:
    Description: "EIC Ring Image Cluster"
    Author: "S. Joosten, C. Peng"
    Members:
      - eic::Index        ID                // Unique cluster ID
      - float             npe               // Number of photo-electrons [#]
      - eic::VectorXYZ    position          // Global position of the cluster [mm]
      - eic::VectorXYZ    positionError     // Error on the position
      - float             theta             // Opening angle of the ring [rad, 0->pi]
      - float             thetaError        // Error on the opening angle
      - float             radius            // Radius of the best fit ring [mm]
      - float             radiusError       // Estimated error from the fit [mm]

  ## ==========================================================================
  ## Tracking
  ## ==========================================================================
  
  eic::RawTrackerHit:
    Description: "Raw (digitized) tracker hit"
    Author: "W. Armstrong, S. Joosten"
    Members:
      - eic::Index        ID                // Unique hit ID. For MC, the value equals the Geant4 hit index.
      - uint64_t          cellID            // The detector specific (geometrical) cell id.
      - int32_t           time              // TDC value.
      - int32_t           charge            // ADC value

  eic::TrackerHit:
    Description: "Tracker hit (reconstructed from Raw)"
    Author: "W. Armstrong, S. Joosten"
    Members:
      - eic::Index        ID                // Unique hit ID, same as one of the involved raw hits.
      - uint64_t          cellID            // The detector specific (geometrical) cell id.
      - eic::VectorXYZ    position          // Hit (cell) position and time [mm, ns]
      - eic::CovDiagXYZ   positionError     // Covariance Matrix
      - float             time              // Hit time
      - float             timeError         // Error on the time
      - float             edep              // Energy deposit in this hit [GeV]
      - float             edepError         // Error on the energy deposit [GeV]

    ## Here's a stub for a prototrack setup. If this is all we use we should
    ## probably just use protocluster instead, but I assume there will be other
    ## members we'll need to communicate
    ## eic::ProtoTrack:
    ##   Description: "Proto track info"
    ##   Author: "W. Armstrong, S. Joosten"
    ##   Members:
    ##     eic::Index       ID                // Unique identifier
    ##     eic::Index       seedID            // Index of corresponding initial track parameters
    ##     eic::Weight      weight            // prototrack weight, in case we share pixels [0-1]
    ##   VectorMembers:
    ##     int32_t          hits              // tracker hit indicies
    
  eic::Trajectory:
    Description: "Raw trajectory from the tracking algorithm"
    Author: "S. Joosten, S. Li"
    Members:
      - uint32_t          type              // 0 (does not have good track fit), 1 (has good track fit)
      - uint32_t          nStates           // Number of tracking steps
      - uint32_t          nMeasurements     // Number of hits used 
      - uint32_t          nOutliers         // Number of hits not considered 
      - uint32_t          nHoles            // Number of missing hits
      - float             chi2              // Total chi2
      - uint32_t          ndf               // Number of degrees of freedom
      - uint32_t          nSharedHits       // Number of shared hits with other trajectories
    VectorMembers:
      - float             measurementChi2   // Chi2 for each of the measurements
      - float             outlierChi2       // Chi2 for each of the outliers
    OneToManyRelations:
      - eic::TrackerHit   measurementHits   // Measurement hits used in this trajectory
      - eic::TrackerHit   outlierHits       // Outlier hits not used in this trajectory
  
  eic::TrackParameters:
    Description: "ACTS Bound Track parameters"
    Author: "W. Armstrong, S. Joosten"
    Members:
      - int32_t           type              // Type of track parameters (-1/seed, 0/head, ...)
      - eic::VectorXY     loc               // 2D location on surface
      - eic::CovXY        locError          // Covariance on loc
      - float             theta             // Track polar angle [rad]
      - float             phi               // Track azimuthal angle [rad]
      - float             qOverP            // [e/GeV]
      - eic::CovXYZ       momentumError     // Covariance on theta, phi and qOverP
      - float             time              // Track time [ns]    
      - float             timeError         // Error on the time
      - float             charge            // Particle charge
    OneToOneRelations:
      - eic::Trajectory   trajectory        // Trajectory associated with these track parameters

  eic::Track:
    Description: "Track information at the vertex"
    Author: "S. Joosten"
    Members:
      - int32_t           type              // Flag that defines the type of track
      - float             chi2              // Total chi2 (sum) of the track fit
      - int32_t           ndf               // Numbers of degrees of freedom of the track fit
      - eic::VectorXYZ    momentum          // Track 3-momentum at the vertex [GeV]
      - eic::CovXYZ       momentumError     // Covariance matrix on the momentum
      - float             time              // Track time at the vertex [ns]
      - float             timeError         // Error on the track vertex time
      - float             charge            // Particle charge
    OneToManyRelations:
      - eic::TrackParameters parameters     // Track fit parameters, the first entry (if present) is evaluated at the track head
      - eic::TrackerHit   trackerHits       // Hits that were used for this track
      - eic::Track        tracks            // Tracks (segments) that have been combined to create this track

  eic::TrackSegment:
    Description: "A track segment defined by one or more points along a track."
    Author: "S. Joosten"
    Members:
      - float             length            // Pathlength from the first to the last point
      - float             lengthError       // Error on the segment length
    OneToOneRelations:
      - eic::Track        track             // Track used for this projection
    VectorMembers:
      - eic::TrackPoint   points            // Points where the track parameters were evaluated

  ## ==========================================================================
  ## Vertexing
  ## ==========================================================================

  eic::Vertex:
    Description: "EIC vertex"
    Author: "W. Armstrong, S. Joosten"
    Members:
      - eic::Index        ID                // Unique vertex ID
      - eic::VectorXYZ    position          // Postion of vertex [mm]
      - float             time              // Time of vertex [ns]
      - float             chi2              // Chi squared of the vertex fit.
      - float             probability       // Probability of the vertex fit
      - bool              primary           // Whether it is the primary vertex of the event

  ## ==========================================================================
  ## Kinematic reconstruction
  ## ==========================================================================

  eic::InclusiveKinematics:
    Description: "Kinematic variables for DIS events"
    Author: "S. Joosten, W. Deconinck"
    Members:
      - float             x                 // Bjorken x (Q2/2P.q)
      - float             Q2                // Four-momentum transfer squared [GeV^2]
      - float             W                 // Invariant mass of final state [GeV]
      - float             y                 // Inelasticity (P.q/P.k)
      - float             nu                // Energy transfer P.q/M [GeV]
      ## Spin state?
      ## phi_S?
      - eic::Index        scatID            // Associated scattered electron (if identified)
